import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Progress } from "@/components/ui/progress";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, AreaChart, Area, ResponsiveContainer, BarChart, Bar } from "recharts";
import { Heart, Activity, Shield, Phone, Upload, FileText, Flame, Clock, Brain, BarChart3, Zap, Gauge } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { useState } from "react";
import { EmergencyMonitor } from "@/components/EmergencyMonitor";
import { PrescriptionUpload } from "@/components/PrescriptionUpload";
import { InsuranceUpload } from "@/components/InsuranceUpload";
import { ChatBox } from "@/components/ChatBox";
import { StepsDetailModal } from "@/components/StepsDetailModal";
import { HeartRateDetailModal } from "@/components/HeartRateDetailModal";
import { CaloriesDetailModal } from "@/components/CaloriesDetailModal";
import { SpO2DetailModal } from "@/components/SpO2DetailModal";
import { BloodPressureDetailModal } from "@/components/BloodPressureDetailModal";
import { SleepTrackingCard } from "@/components/SleepTrackingCard";
import { MapCard } from "@/components/MapCard";
import ActivityCard from "@/components/ActivityCard";
import type { DashboardData } from "@/types/types"; // adjust import path
import { SimpleMap } from "@/components/SimpleMap";

interface CustomerDashboardProps {
  data: DashboardData | null; // allow null while loading
  devices: any[];
  selectedDevice: string;
  onDeviceChange: (id: string) => void;
}

const healthData = [
  { time: "6:00", heartRate: 68, bloodPressure: 120, steps: 0 },
  { time: "9:00", heartRate: 72, bloodPressure: 118, steps: 2500 },
  { time: "12:00", heartRate: 78, bloodPressure: 125, steps: 5200 },
  { time: "15:00", heartRate: 75, bloodPressure: 122, steps: 7800 },
  { time: "18:00", heartRate: 70, bloodPressure: 119, steps: 9200 },
  { time: "21:00", heartRate: 65, bloodPressure: 115, steps: 10500 },
];

const medicationSchedule = [
  { name: "Lisinopril", time: "8:00 AM", dosage: "10mg", status: "taken" },
  { name: "Metformin", time: "12:00 PM", dosage: "500mg", status: "taken" },
  { name: "Aspirin", time: "6:00 PM", dosage: "81mg", status: "pending" },
  { name: "Vitamin D", time: "8:00 PM", dosage: "1000 IU", status: "pending" },
];

const recentActivities = [
  { activity: "Morning walk", duration: "30 min", time: "7:30 AM", calories: 150 },
  { activity: "Light exercise", duration: "15 min", time: "10:00 AM", calories: 80 },
  { activity: "Garden work", duration: "45 min", time: "4:00 PM", calories: 200 },
];

const weeklyActivity = [
  { day: "M", active: true },
  { day: "T", active: false },
  { day: "W", active: true },
  { day: "T", active: true },
  { day: "F", active: false },
  { day: "S", active: true },
  { day: "S", active: true },
];

const calorieData = [
  { day: "Mon", calories: 1850 },
  { day: "Tue", calories: 1920 },
  { day: "Wed", calories: 1780 },
  { day: "Thu", calories: 1931 },
  { day: "Fri", calories: 2100 },
  { day: "Sat", calories: 1650 },
  { day: "Sun", calories: 1890 },
];

const stressData = [
  { time: "6:00", stress: 25 },
  { time: "9:00", stress: 45 },
  { time: "12:00", stress: 30 },
  { time: "15:00", stress: 55 },
  { time: "18:00", stress: 20 },
  { time: "21:00", stress: 30 },
];

export const CustomerDashboard = ({ data, devices, selectedDevice, onDeviceChange }: CustomerDashboardProps) => {
  console.log("realtime api", data);
  const { toast } = useToast();
  const [reportRequest, setReportRequest] = useState("");
  const [showStepsModal, setShowStepsModal] = useState(false);
  const [showHeartRateModal, setShowHeartRateModal] = useState(false);
  const [showCaloriesModal, setShowCaloriesModal] = useState(false);
  const [showBloodPressureModal, setShowBloodPressureModal] = useState(false);
  const [showSpO2Modal, setShowSpO2Modal] = useState(false);

  const handleReportSubmit = () => {
    if (!reportRequest.trim()) {
      toast({
        title: "Please enter your report request",
        description: "Add details about what you'd like in your medical report.",
        variant: "destructive",
      });
      return;
    }

    toast({
      title: "Report Request Submitted",
      description: "Your medical report will be generated by AI and verified by a medical doctor. It will be uploaded to your dashboard within 48 hours.",
    });

    setReportRequest("");
  };

  return (
    <div className="space-y-4 p-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold text-foreground">My Health Dashboard</h1>
        <Badge variant="secondary">Customer Portal</Badge>
      </div>

      {/* Emergency Monitor - Always at top for customers */}
      <EmergencyMonitor />
      {/* Divider + Device Selector */}
      <div className="flex items-center justify-between my-4 border-b border-border pb-2">
        <h2 className="text-sm text-muted-foreground">Devices</h2>
        <select
          className="border rounded-md px-2 py-1 text-sm"
          value={selectedDevice}
          onChange={(e) => onDeviceChange(e.target.value)}
        >
          {devices.map((device) => (
            <option key={device.id} value={device.id}>
              {device.model}
            </option>
          ))}
        </select>
      </div>

      {/* Health Status Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <Card className="group relative overflow-hidden bg-gradient-to-br from-red-50 to-rose-100 border-red-200 hover:shadow-lg transition-all duration-300">
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <Heart className="h-10 w-10 text-red-500" />
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowHeartRateModal(true)}
                className="h-8 w-8 p-0 hover:bg-red-100 text-red-600"
              >
                <BarChart3 className="h-4 w-4" />
              </Button>
            </div>
            <div>
              <p className="text-sm text-red-600/70 font-medium">Heart Rate</p>
              <p className="text-3xl font-bold text-red-700 mb-1">{ data ? data.heartrate : "--" }</p>
              <p className="text-xs text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full inline-block">{ data?.stress ? data.stress.toUpperCase() : "N/A" }</p>
            </div>
          </div>
          <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-red-400 to-rose-400"></div>
        </Card>

        <Card className="group relative overflow-hidden bg-gradient-to-br from-blue-50 to-indigo-100 border-blue-200 hover:shadow-lg transition-all duration-300">
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <Activity className="h-10 w-10 text-blue-600" />
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowStepsModal(true)}
                className="h-8 w-8 p-0 hover:bg-blue-100 text-blue-600"
              >
                <BarChart3 className="h-4 w-4" />
              </Button>
            </div>
            <div>
              <p className="text-sm text-blue-600/70 font-medium">Daily Steps</p>
              <p className="text-3xl font-bold text-blue-700 mb-1">{ data ? data.total_steps : "--" }</p>
              <p className="text-xs text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full inline-block">{ data && data.total_steps >= 10000 ? "Goal Achieved! ðŸŽ‰" : "Keep Going" } </p>
            </div>
          </div>
          <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-blue-400 to-indigo-400"></div>
        </Card>

        <Card className="group relative overflow-hidden bg-gradient-to-br from-orange-50 to-amber-100 border-orange-200 hover:shadow-lg transition-all duration-300">
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <Gauge className="h-10 w-10 text-orange-600" />
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowBloodPressureModal(true)}
                className="h-8 w-8 p-0 hover:bg-orange-100 text-orange-600"
              >
                <BarChart3 className="h-4 w-4" />
              </Button>
            </div>
            <div>
              <p className="text-sm text-orange-600/70 font-medium">Blood Pressure</p>
              <p className="text-3xl font-bold text-orange-700 mb-1">{data ? `${data.latest_bp_systolic}/${data.latest_bp_diastolic}` : "--"}</p>
              <p className="text-xs text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full inline-block">Normal</p>
            </div>
          </div>
          <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-orange-400 to-amber-400"></div>
        </Card>

        <Card className="group relative overflow-hidden bg-gradient-to-br from-cyan-50 to-sky-100 border-cyan-200 hover:shadow-lg transition-all duration-300">
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <Zap className="h-10 w-10 text-cyan-600" />
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowSpO2Modal(true)}
                className="h-8 w-8 p-0 hover:bg-cyan-100 text-cyan-600"
              >
                <BarChart3 className="h-4 w-4" />
              </Button>
            </div>
            <div>
              <p className="text-sm text-cyan-600/70 font-medium">SpO2</p>
              <p className="text-3xl font-bold text-cyan-700 mb-1">{data ? `${data.latest_o2}%` : "--"}</p>
              <p className="text-xs text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full inline-block">Excellent</p>
            </div>
          </div>
          <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-cyan-400 to-sky-400"></div>
        </Card>


        <Card className="group relative overflow-hidden bg-gradient-to-br from-violet-50 to-purple-100 border-violet-200 hover:shadow-lg transition-all duration-300">
          <div className="p-6">
            <div className="flex items-center justify-between mb-4">
              <Shield className="h-10 w-10 text-violet-600" />
              <div className="flex space-x-1">
                <div className="h-2 w-2 bg-green-500 rounded-full"></div>
                <div className="h-2 w-2 bg-green-500 rounded-full"></div>
                <div className="h-2 w-2 bg-green-500 rounded-full"></div>
              </div>
            </div>
            <div>
              <p className="text-sm text-violet-600/70 font-medium">Health Status</p>
              <p className="text-3xl font-bold text-violet-700 mb-1">Excellent</p>
              <p className="text-xs text-green-600 font-medium bg-green-50 px-2 py-1 rounded-full inline-block">All Systems Normal</p>
            </div>
          </div>
          <div className="absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-violet-400 to-purple-400"></div>
        </Card>
      </div>

      {/* Enhanced Health Metrics, Sleep, and Map */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
        {/* Calories Burned */}
        <Card className="p-6 bg-gradient-to-br from-green-50 to-green-100 border-green-200">
          <div className="flex items-center justify-between mb-4">
            <Flame className="h-6 w-6 text-green-600 mr-3" />
            <div className="flex items-center gap-2">
              <h3 className="text-lg font-semibold text-green-700">Calories Burned</h3>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setShowCaloriesModal(true)}
                className="h-8 w-8 p-0 hover:bg-green-100 text-green-600"
              >
                <BarChart3 className="h-4 w-4" />
              </Button>
            </div>
          </div>
          
          <div className="text-center mb-4">
            <p className="text-3xl font-bold text-green-700">{data ? `${data.calories_burned}` : 0}</p>
          </div>
          
          <div className="mb-4">
            <div className="flex justify-between mb-2">
              <span className="text-sm text-green-600">Active: {data?.calories_burned_active ?? 0}</span>
              <span className="text-sm text-green-600">Resting: {data?.calories_burned_resting ?? 0}</span>
            </div>
            <div className="w-full bg-green-200 rounded-full h-3">
              <div 
                className="bg-red-500 h-3 rounded-l-full"
                style={{
                width: `${
                  data && data.calories_burned_resting
                    ? (data.calories_burned_active / data.calories_burned_resting) * 100
                    : 0
                }%`
              }}
              ></div>
            </div>
          </div>
          
          <div className="mt-10">
            <div className="text-center mb-5">
              <p className="text-xs text-green-600">Last 7d</p>
            </div>
            
            <ResponsiveContainer width="100%" height={60}>
              <BarChart data={data?.calories_burned_trend7d ?? []}>
                <XAxis dataKey="day" tick={{ fontSize: 10 }} />
                <YAxis hide />
                <Tooltip />
                <Bar dataKey="calories" fill="#16a34a" radius={[2, 2, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </div>
        </Card>

        {/* Sleep Tracking Card */}
        <SleepTrackingCard data={data?.sleep_quality ?? null} />

        {/* Map Card */}
        <MapCard className="lg:col-span-1" />

        {/* <SimpleMap latitude={23.43} longitude={43.56}/> */}
      </div>

     {/* Enhanced Activity Card */}
      <div className="grid grid-cols-1 gap-4">
        <ActivityCard />
      </div>

      

      {/* Report Generation */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <FileText className="h-5 w-5 mr-2" />
          Generate Medical Report
        </h3>
        <div className="space-y-4">
          <Textarea
            placeholder="Describe what you'd like included in your medical report (e.g., recent symptoms, medication review, health summary)..."
            value={reportRequest}
            onChange={(e) => setReportRequest(e.target.value)}
            rows={4}
          />
          <Button onClick={handleReportSubmit} className="w-full">
            Submit Report Request
          </Button>
        </div>
      </Card>

      
      {/* Emergency Contacts */}
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4 flex items-center">
          <Phone className="h-5 w-5 mr-2" />
          Emergency Contacts
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="p-4 border border-border rounded-lg">
            <p className="font-medium text-foreground">Primary Contact</p>
            <p className="text-sm text-muted-foreground">Dr. Sarah Johnson</p>
            <p className="text-sm text-foreground">(555) 123-4567</p>
          </div>
          <div className="p-4 border border-border rounded-lg">
            <p className="font-medium text-foreground">Emergency Services</p>
            <p className="text-sm text-muted-foreground">Local Emergency</p>
            <p className="text-sm text-foreground">911</p>
          </div>
          <div className="p-4 border border-border rounded-lg">
            <p className="font-medium text-foreground">Family Contact</p>
            <p className="text-sm text-muted-foreground">John Smith (Son)</p>
            <p className="text-sm text-foreground">(555) 987-6543</p>
          </div>
        </div>
      </Card>

      {/* Steps Detail Modal */}
      <StepsDetailModal isOpen={showStepsModal} onClose={() => setShowStepsModal(false)} />
      
      {/* Heart Rate Detail Modal */}
      <HeartRateDetailModal isOpen={showHeartRateModal} onClose={() => setShowHeartRateModal(false)} />
      
      {/* Calories Detail Modal */}
      <CaloriesDetailModal isOpen={showCaloriesModal} onClose={() => setShowCaloriesModal(false)} />
      
      {/* SpO2 Detail Modal */}
      <SpO2DetailModal isOpen={showSpO2Modal} onClose={() => setShowSpO2Modal(false)} />
      
      {/* Blood Pressure Detail Modal */}
      <BloodPressureDetailModal isOpen={showBloodPressureModal} onClose={() => setShowBloodPressureModal(false)} />

      {/* AI Chatbox */}
      <ChatBox />
    </div>
  );
};